import { Logger } from '/src/tools/Logger'
export class ExceptionHandler{
    constructor(ns, context = 'CONTXT') {
        this.ns = ns;
        this.context = context;
        this.verbose = false;
        this.logger = new Logger(this.verbose, this.context);
    }
    /**
     * Handles the different kinds of exceptions that occur in the application
     * @param {object | string} exception The exception to handle
     * @param {string} localContext context from where the exception originated
     * @returns {string} human readable output
     */
    handle(exception, localContext = ''){
        let output;
        if(typeof exception === 'object' && typeof exception.message !== 'undefined') {
            output = exception.message
        }else if (typeof exception === 'string'){
            
            if(exception.includes('|')) {
                exception.replace('DELIMITER', ', ')
                let parts = exception.split('|');
                output = parts.join(' ');
                
            }else{
                output = exception;
            }
        }
        this.ns.tprint(`[EXCEPT] [${this.context}${localContext !== '' ? ':' + localContext : ''}] - ${output}`)
        return output;
    }
    /**
     * Listen for a KillSignal (generated by the 'kill-all' alias)
     * @param {int} port port on which to listen for the killSignal
     * @returns {bool} whether we received a killSignal
     */
    checkKillSignal(port) {
        let killSignal = this.ns.readPort(port.id);
        if(killSignal !== 'NULL PORT DATA') {
            this.logger.notify(`Kill signal received: terminating...`)
            return true;
        }
        return false;
    }
}